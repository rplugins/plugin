# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ksdlb3nfrkNuLIYs2YG36gh39qdxJIVT
"""

!/usr/local/cuda/bin/nvcc --version

!pip install git+git://github.com/andreinechaev/nvcc4jupyter.git

# Commented out IPython magic to ensure Python compatibility.
# %load_ext nvcc_plugin

# Commented out IPython magic to ensure Python compatibility.
# %%cu
# #include<iostream>
# #include<cuda_runtime.h>
# #include<stdlib.h>
# 
# using namespace std;
# __global__ void add(int *a,int *b,int *c)
# {
#     c[threadIdx.x]=a[threadIdx.x]+b[threadIdx.x];
# }
# int main(){
#     
#     int n=100;
#     
#     int *a,*b,*c;
#     
#     int *da,*db,*dc;
#     
#     int size = n * sizeof(int);
#     
#     a=(int*)malloc(size);
#     b=(int*)malloc(size);
#     c=(int*)malloc(size);
#     
#     for(int i=0;i<n;i++)
#     {
#       a[i]=i;
#       b[i]=i+n;
#         
#       //cout<<i<<" "<<a[i]<<" "<<b[i]<<" "<<c[i]<<endl;
#     }
#     
#     cudaMalloc((void **)&da,size);
#     cudaMalloc((void **)&db,size);
#     cudaMalloc((void **)&dc,size);
#     
#     cudaMemcpy(da,a,size,cudaMemcpyHostToDevice);
#     cudaMemcpy(db,b,size,cudaMemcpyHostToDevice);
#     
#     add<<<1,n>>>(da,db,dc);
#     
#     cudaMemcpy(c,dc,size,cudaMemcpyDeviceToHost);
#     
#     for(int i=0;i<n;i++)
#     {
#       cout<<i<<" "<<c[i]<<endl;
#     }
#     return 0;
# }

# Commented out IPython magic to ensure Python compatibility.
# %%cu
# #include<iostream>
# #include<cuda_runtime.h>
# #include<stdlib.h>
# 
# using namespace std;
# __global__ void add(int *a,int n)
# {
#     int blocksize = blockDim.x;
#     int idx= threadIdx.x;
#     int step=1;
#     
#     int first=idx;
#     while(blocksize>0)
#     {
#       first=first*2;
#       int second=first+step;
#     
#       if(second<n)
#       {
#           if(a[first]<a[second])
#          {
#              a[second]=a[first];
#          }
#          else
#          {
#              a[first]=a[second];
#          }
#       }
#       step=step*2;
#       blocksize=blocksize/2;
#     }
#     
# }
# int main(){
#     //int test=0;
#     time_t t;
#     srand((unsigned) time(&t));
#     
#     
#     int n=16;
#     
#     int *a ;
#     
#     int *da;
#     
#     int size = n * sizeof(int);
#     
#     a=(int*)malloc(size);
#     
#     
# 
#     for(int i=0;i<n;i++)
#     {
#       a[i]= rand() % (n*5);
#       //cout<<i<<" "<<a[i]<<endl;
#     }
#     
#     int min=999999;
#     for(int i=0;i<n;i++)
#     {
#         if(a[i]<min)
#         {
#             min=a[i];
#         }
#     }
#     cudaMalloc((void **)&da,size);
#     
#     cudaMemcpy(da,a,size,cudaMemcpyHostToDevice);
#     
#     add<<<1,n/2>>>(da,n);
#     
#     cudaMemcpy(a,da,size,cudaMemcpyDeviceToHost);
#     
#     cout<<"min"<<" "<<min<<"  "<<a[0]<<endl;
#     //#for(int i=0;i<n;i++)
#     //#{
#     //#  cout<<i<<" "<<a[i]<<endl;
#     //#}
#     if(min!=a[0])
#         {
#            cout<<"not equal"<<min<<a[0]<<endl;
#            // break;
#         }
#     
#     
#     //cout<<test<<endl;
#     return 0;
# }



!git clone git://github.com/aadityadeshpande/ProjectCentricMail.git